{"version":3,"sources":["reducers/fetchReducer.js","actions/index.js","App.js","index.js"],"names":["initialState","isLoading","error","quote","fetchReducer","state","action","type","console","log","payload","connect","fetchKanyeQuote","dispatch","axios","get","then","response","data","catch","er","props","className","onClick","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById"],"mappings":"u1BAGA,IAAMA,EAAe,CACjBC,WAAW,EACXC,MAAO,GACPC,MAAO,uCA6BIC,EA1BO,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAEpD,OAAQA,EAAOC,MACX,ICVwB,mBDWpB,OADmBC,QAAQC,IAAIH,EAAOI,SAC/B,EAAP,GACOL,EADP,CACcJ,WAAW,IAG7B,ICd0B,qBDgBtB,OADAO,QAAQC,IAAIH,EAAOI,QAAQ,qBACpB,EAAP,GACOL,EADP,CAEIF,MAAO,CAACG,EAAOI,SACfT,WAAW,IAEnB,ICpBsB,iBDqBlB,OAAO,EAAP,GACOI,EADP,CAEIH,MAAOI,EAAOI,QACdT,WAAW,IAEnB,QACI,OAAOI,I,YEXnB,IAKeM,eALS,SAAAN,GACtB,MAAO,CACLJ,UAAWI,EAAMJ,UAAWC,MAAOG,EAAMH,MAAOC,MAAOE,EAAMF,SAGzB,CAAES,gBDnBX,kBAAM,SAAAC,GAEjCA,EAAS,CAAEN,KANiB,qBAO5BO,IAAMC,IAAN,0BACKC,MAAK,SAAAC,GAAQ,OAAIJ,EAAS,CAAEN,KAPH,qBAO6BG,QAASO,EAASC,KAAKf,WAC7EgB,OAAM,SAAAC,GAAE,OAAIP,EAAS,CAAEN,KAPF,iBAOwBG,QAAQ,GAAD,OAAKU,WCcnDT,EAnBf,SAAaU,GACX,OACE,yBAAKC,UAAU,OACb,4BAAQC,QAAS,WAAQF,EAAMT,oBAA/B,iBACCS,EAAMnB,OAAS,6BAAMmB,EAAMnB,OAEzBmB,EAAMpB,UACJ,sDACE,oCAAE,+CAAqBoB,EAAMlB,YCApCqB,EAAQC,YAAYrB,EAAcsB,YAAgBC,IAAMC,MAI9DC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.8d30a22b.chunk.js","sourcesContent":["import { KANYE_LOAD_START, KANYE_LOAD_SUCCESS, KANYE_LOAD_ERR } from \"../actions\"\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: \"\",\r\n    quote: \"tucker is smart as a whippersnapper\",\r\n};\r\n\r\n const fetchReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case KANYE_LOAD_START:{console.log(action.payload);\r\n            return {\r\n                ...state, isLoading: true\r\n\r\n            };}\r\n        case KANYE_LOAD_SUCCESS:{\r\n            console.log(action.payload,\"logthisshitdamnit\");\r\n            return {\r\n                ...state,\r\n                quote: [action.payload],\r\n                isLoading: false,\r\n            };}\r\n        case KANYE_LOAD_ERR:{ \r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isLoading: false,\r\n            };}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\nexport default fetchReducer\r\n","import axios from \"axios\"\r\n\r\nexport const KANYE_LOAD_START = \"KANYE_LOAD_START\"\r\nexport const KANYE_LOAD_SUCCESS = \"KANYE_LOAD_SUCCESS\"\r\nexport const KANYE_LOAD_ERR = \"KANYE_LOAD_ERR\"\r\n\r\nexport const fetchKanyeQuote = () => dispatch => {\r\n\r\n    dispatch({ type: KANYE_LOAD_START });\r\n    axios.get(`https://api.kanye.rest`)\r\n        .then(response => dispatch({ type: KANYE_LOAD_SUCCESS, payload: response.data.quote }))\r\n        .catch(er => dispatch({ type: KANYE_LOAD_ERR, payload: `${er}` })\r\n        )\r\n}\r\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { fetchKanyeQuote } from './actions'\n\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <button onClick={() => { props.fetchKanyeQuote() }}>share swagger</button>\n      {props.error && <div>{props.error}</div>}\n      {\n        (props.isLoading) ?\n          (<div>....loading swagggguh</div>) :\n            (<><div>the swaggggguh:{props.quote}</div></>)\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.isLoading, error: state.error, quote: state.quote,\n  }\n}\nexport default connect(mapStateToProps, { fetchKanyeQuote })(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\n\n\nimport fetchReducer from './reducers/fetchReducer'\n\nimport './index.css';\nimport App from './App';\n\nconst store = createStore(fetchReducer, applyMiddleware(thunk,logger));\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}